package com.nn.mindweb.server.messages;

object HeaderNames {
  val ACCEPT = "Accept"
  val ACCEPT_CHARSET = "Accept-Charset"
  val ACCEPT_ENCODING = "Accept-Encoding"
  val ACCEPT_LANGUAGE = "Accept-Language"
  val ACCEPT_RANGES = "Accept-Ranges"
  val ACCEPT_PATCH = "Accept-Patch"
  val ACCESS_CONTROL_ALLOW_CREDENTIALS = "Access-Control-Allow-Credentials"
  val ACCESS_CONTROL_ALLOW_HEADERS = "Access-Control-Allow-Headers"
  val ACCESS_CONTROL_ALLOW_METHODS = "Access-Control-Allow-Methods"
  val ACCESS_CONTROL_ALLOW_ORIGIN = "Access-Control-Allow-Origin"
  val ACCESS_CONTROL_EXPOSE_HEADERS = "Access-Control-Expose-Headers"
  val ACCESS_CONTROL_MAX_AGE = "Access-Control-Max-Age"
  val ACCESS_CONTROL_REQUEST_HEADERS = "Access-Control-Request-Headers"
  val ACCESS_CONTROL_REQUEST_METHOD = "Access-Control-Request-Method"
  val AGE = "Age"
  val ALLOW = "Allow"
  val AUTHORIZATION = "Authorization"
  val CACHE_CONTROL = "Cache-Control"
  val CONNECTION = "Connection"
  val CONTENT_BASE = "Content-Base"
  val CONTENT_ENCODING = "Content-Encoding"
  val CONTENT_LANGUAGE = "Content-Language"
  val CONTENT_LENGTH = "Content-Length"
  val CONTENT_LOCATION = "Content-Location"
  val CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding"
  val CONTENT_MD5 = "Content-MD5"
  val CONTENT_RANGE = "Content-Range"
  val CONTENT_TYPE = "Content-Type"
  val COOKIE = "Cookie"
  val DATE = "Date"
  val ETAG = "ETag"
  val EXPECT = "Expect"
  val EXPIRES = "Expires"
  val FROM = "From"
  val HOST = "Host"
  val IF_MATCH = "If-Match"
  val IF_MODIFIED_SINCE = "If-Modified-Since"
  val IF_NONE_MATCH = "If-None-Match"
  val IF_RANGE = "If-Range"
  val IF_UNMODIFIED_SINCE = "If-Unmodified-Since"
  val LAST_MODIFIED = "Last-Modified"
  val LOCATION = "Location"
  val MAX_FORWARDS = "Max-Forwards"
  val ORIGIN = "Origin"
  val PRAGMA = "Pragma"
  val PROXY_AUTHENTICATE = "Proxy-Authenticate"
  val PROXY_AUTHORIZATION = "Proxy-Authorization";
  val RANGE = "Range"
  val REFERER = "Referer"
  val RETRY_AFTER = "Retry-After"
  val SEC_WEBSOCKET_KEY1 = "Sec-WebSocket-Key1"
  val SEC_WEBSOCKET_KEY2 = "Sec-WebSocket-Key2"
  val SEC_WEBSOCKET_LOCATION = "Sec-WebSocket-Location"
  val SEC_WEBSOCKET_ORIGIN = "Sec-WebSocket-Origin"
  val SEC_WEBSOCKET_PROTOCOL = "Sec-WebSocket-Protocol"
  val SEC_WEBSOCKET_VERSION = "Sec-WebSocket-Version"
  val SEC_WEBSOCKET_KEY = "Sec-WebSocket-Key"
  val SEC_WEBSOCKET_ACCEPT = "Sec-WebSocket-Accept"
  val SERVER = "Server"
  val SET_COOKIE = "Set-Cookie"
  val SET_COOKIE2 = "Set-Cookie2"
  val TE = "TE"
  val TRAILER = "Trailer"
  val TRANSFER_ENCODING = "Transfer-Encoding"
  val UPGRADE = "Upgrade"
  val USER_AGENT = "User-Agent"
  val VARY = "Vary"
  val VIA = "Via"
  val WARNING = "Warning"
  val WEBSOCKET_LOCATION = "WebSocket-Location"
  val WEBSOCKET_ORIGIN = "WebSocket-Origin"
  val WEBSOCKET_PROTOCOL = "WebSocket-Protocol"
  val WWW_AUTHENTICATE = "WWW-Authenticate"
}

object HeaderValues {
  val APPLICATION_X_WWW_FORM_URLENCODED = "application/x-www-form-urlencoded"
  val BASE64 = "base64"
  val BINARY = "binary"
  val BOUNDARY = "boundary"
  val BYTES = "bytes"
  val CHARSET = "charset"
  val CHUNKED = "chunked"
  val CLOSE = "close"
  val COMPRESS = "compress"
  val CONTINUE =  "100-continue"
  val DEFLATE = "deflate"
  val GZIP = "gzip"
  val IDENTITY = "identity"
  val KEEP_ALIVE = "keep-alive"
  val MAX_AGE = "max-age"
  val MAX_STALE = "max-stale"
  val MIN_FRESH = "min-fresh"
  val MULTIPART_FORM_DATA = "multipart/form-data"
  val MUST_REVALIDATE = "must-revalidate"
  val NO_CACHE = "no-cache"
  val NO_STORE = "no-store"
  val NO_TRANSFORM = "no-transform"
  val NONE = "none"
  val ONLY_IF_CACHED = "only-if-cached"
  val PRIVATE = "private"
  val PROXY_REVALIDATE = "proxy-revalidate"
  val PUBLIC = "public"
  val QUOTED_PRINTABLE = "quoted-printable"
  val S_MAXAGE = "s-maxage"
  val TRAILERS = "trailers"
  val UPGRADE = "Upgrade"
  val WEBSOCKET = "WebSocket"
}